{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"index.html","title":"PyARV","text":""},{"location":"index.html#author","title":"Author","text":"<p>Dr Oliver Sheridan-Methven  oliver.sheridan-methven@hotmail.co.uk.</p>"},{"location":"index.html#description","title":"Description","text":"<p>Python wrapper of a C implementation of  approximate random variables as detailed in:</p> <p>Michael Giles and Oliver Sheridan-Methven. 2023. Approximating Inverse Cumulative Distribution Functions  to Produce Approximate Random Variables. ACM Trans. Math. Softw. 49, 3, Article 26 (September 2023), 29 pages. https://doi.org/10.1145/3604935</p>"},{"location":"index.html#documentation","title":"Documentation","text":"<p>The full documentation can be found here: Documentation.</p>"},{"location":"LICENSE.html","title":"License","text":"<p>MIT License</p> <p>Copyright (c) 2024 Dr Oliver Sheridan-Methven</p> <p>Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:</p> <p>The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.</p> <p>THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.</p>"},{"location":"developer_notes/advanced.html","title":"Advanced","text":""},{"location":"developer_notes/advanced.html#updating-the-git-versions-and-releases","title":"Updating the git versions and releases","text":"<p>To list the git version tags: </p> <pre><code>git tag -l\n</code></pre> <p>To list the git version tags along with a brief 1-line description (<code>-n&lt;K&gt;</code> for <code>K</code> lines):</p> <pre><code>git tag -l -n1\n</code></pre> <p>To add a tag use:</p> <pre><code>git tag -a &lt;vX.Y.Z&gt; -m \"&lt;SOME BRIEF MESSAGE&gt;\"\n</code></pre> <p>The tag then needs to be pushed:</p> <pre><code>git push --tags\n</code></pre> <p>To set a release with a tag:</p> <pre><code>gh release create $(git describe --tags --abbrev=0)\n</code></pre>"},{"location":"developer_notes/advanced.html#updating-the-remote-documentation","title":"Updating the remote documentation.","text":"<p>To update the documentation hosted remotely (e.g. on GitHub Pages),  then on <code>master</code> we need to redeploy the documents after  the most relevant commit by calling:</p> <pre><code>mkdocs gh-deploy --clean\n</code></pre>"},{"location":"developer_notes/dependencies.html","title":"Dependencies","text":""},{"location":"developer_notes/dependencies.html#list-of-dependencies","title":"List of dependencies","text":"<p>The project relies on a few dependencies, the most notable of which include:</p>"},{"location":"developer_notes/dependencies.html#the-source-code","title":"The source code","text":"<ul> <li>GCC (with C23 and C++23 support).</li> <li>CMake (for building).</li> <li>GLIB (for logging).</li> <li>Argp (for the CLI).</li> <li>Criterion (for testing).</li> </ul>"},{"location":"developer_notes/dependencies.html#python-bindings","title":"Python bindings","text":"<ul> <li>scikit-build (for Python bindings).</li> </ul>"},{"location":"developer_notes/dependencies.html#the-documentation","title":"The documentation","text":"<ul> <li>mkdocs (for documentation).<ul> <li>mkdocs-same-dir.</li> <li>mkdocs-awesome-pages-plugin.</li> <li>mkdocs-exclude</li> <li>pillow cairosvg</li> <li>mkdocs-git-revision-date-localized-plugin</li> <li>mkdocs-git-committers-plugin-2</li> </ul> </li> <li>github command line tools <code>gh</code></li> </ul>"},{"location":"developer_notes/dependencies.html#installation","title":"Installation","text":"<p>Most of these can be installed either through <code>pip</code> or <code>brew</code> or similar. </p>"},{"location":"developer_notes/dependencies.html#virtual-environments","title":"Virtual environments","text":"<p>In our setup, we use a Python-3.11 based virtual environment based in the root directory of the project. </p>"},{"location":"developer_notes/faqs.html","title":"Frequently asked questions","text":""},{"location":"developer_notes/faqs.html#i-cant-build-with-gcc-on-mac-osx","title":"I can't build with GCC on Mac OSX","text":"<p>On newer versions of Mac the latest versions of Clang use the <code>libc++</code> implementation of the C++ standard library, whereas GCC uses <code>libstdc++</code>, which does not have as much newer C++11 feature support. There is an ABI incompatability between the two,  so on Mac something compiled with Clang can't be linked with something  compiled with GCC, because they use two differing implementations  of the C++ standard library. (On Linux both compilers use <code>libc++</code> so this isn't as much of an issue).</p> <p>Consequently, if on your Mac you install some standard libraries, such as  e.g. Boost, which might contain non-header-only (e.g. program options),  then on Mac then brew will likely default to Clang. This can start to lead down a rabit hole of trying to compile everything with differing compilers and standard library versions. </p> <p>Currently, the authors, who develop this on a Mac, haven't found a nice solution for this. Consequently, on Mac, we recommend using the Clang  compiler suite as it has better native support. </p>"},{"location":"developer_notes/getting_started.html","title":"Getting started","text":""},{"location":"developer_notes/getting_started.html#downloading-the-repo","title":"Downloading the repo","text":"<p>To download the repo run</p> <pre><code>git clone https://github.com/oliversheridanmethven/testing.git\n</code></pre>"},{"location":"developer_notes/getting_started.html#dependencies","title":"Dependencies","text":"<p>The dependencies and details about their installation can be found in Dependencies.</p>"},{"location":"developer_notes/getting_started.html#building-the-latest-documentation","title":"Building the latest documentation","text":"<p>In the project's root directory, run:</p> <pre><code>mkdocs build\n</code></pre> <p>The documentation can now be found under <code>site/</code> and opened in your browser. </p> <p>Alternatively, you can launch your own server by running </p> <pre><code>mike serve\n</code></pre> <p>and clicking the link to the server is has created. (Typically this is e.g. http://127.0.0.1:8000/ ).</p>"},{"location":"developer_notes/todo.html","title":"TODO","text":"<p>There are various things I would like to add to this repo, including:</p> <ul> <li>Git hooks:</li> <li>Publishing documentation. </li> <li>Generating code documentation with MkDoxy2. <ul> <li>Add C/C++ code documentation with Doxygen. </li> </ul> </li> <li>Ensuring build succeeds and tests pass. </li> <li>Assert compiler requirements. </li> <li>Ship with dependencies. </li> <li>Add code formatter (e.g. clangd).</li> </ul>"},{"location":"developer_notes/build_instructions/from_source.html","title":"Building from source","text":""},{"location":"developer_notes/build_instructions/from_source.html#out-of-source-builds","title":"Out-of-source builds","text":"<p>We follow the CMake convention by only encouraging \"out-of-source\" builds, hence the reason for this build directory existing. This directory exists only for manual building and testing with <code>cmake</code> et al.</p> <p>To build the project:</p> <pre><code>cd build\ncmake .. \nmake \npip3 install .. \nctest \n</code></pre> <p>Note</p> <p><code>make test</code> and <code>ctest</code> are synonymous.</p> <p>Running things in parallel</p> <p><code>cmake</code>, <code>ctest</code>, and <code>make</code> can all use multiple cores,  to speed things up, typically by adding a <code>-j &lt;N&gt;</code> or  <code>--parallel &lt;N&gt;</code> flag. </p> <p>The reason we install the Python package is because many of our tests are Python based as well, including several  C extensions and various Python modules we have created.  Hence, without this step, the various Python imports won't work correctly and many of the tests can be expected to fail. </p>"},{"location":"developer_notes/build_instructions/from_source.html#modern-c23-compilers","title":"Modern C23 compilers","text":"<p>We are trying to use a very modern C standard (C23 is brand new at the time of writing), and compiler support for this is very limited. To ensure <code>cmake</code> can find a sufficiently new compiler version, it may be necessary to hard wire paths to these in your invocation of <code>cmake</code>, e.g.:</p> <pre><code>cmake -D CMAKE_C_COMPILER=/usr/local/Cellar/gcc/13.1.0/bin/gcc-13 -D CMAKE_CXX_COMPILER=/usr/local/Cellar/gcc/13.1.0/bin/g++-13 ..\n</code></pre>"},{"location":"developer_notes/build_instructions/from_source.html#debugging","title":"Debugging","text":"<p>If any tests are failing, then these can be debugged further by running</p> <pre><code>ctest --rerun-failed --output-on-failure\n</code></pre>"},{"location":"developer_notes/build_instructions/from_source.html#demo","title":"Demo","text":""},{"location":"developer_notes/build_instructions/in_source.html","title":"In source builds","text":""},{"location":"developer_notes/build_instructions/in_source.html#why-allow-in-source-builds","title":"Why allow in source builds?","text":"<p>In source builds are largely discouraged, and are only  recommended for use by developers. The reason we support this  for developers is to populate the source directory with various  generated files, libraries, etc. The use of this is for example: placing python extension libraries in the source directory.  This allowed for them to be picked up by an interpreter which can point to the in source code, rather than what is  produced by the scikit build procedure. This means code which is under development can be more easily accessed by an IDE or interpreter. </p>"},{"location":"developer_notes/build_instructions/in_source.html#making-in-source-builds","title":"Making in source builds","text":"<p>From the projects root directory run </p> <pre><code>cmake .\nmake \nmake install\nmake test \n</code></pre> <p>Note</p> <p>This is run from the project's root directory, not from a  separate dedicated build directory.</p>"},{"location":"developer_notes/build_instructions/in_source.html#cleaning-everything-up","title":"Cleaning everything up","text":"<p>To clean everything up, run </p> <pre><code>make clean\n./cmake_uninstall.sh\n</code></pre>"},{"location":"developer_notes/build_instructions/in_source.html#adjusting-your-pythonpath","title":"Adjusting your <code>PYTHONPATH</code>","text":"<p>If you plan on testing out the code using the source code in  the repository, such as for use in a terminal setting or an  IDE, then it might be useful to add the contents of <code>src/</code> to your <code>PYTHONPATH</code> environment variable. To do just this we have the script <code>add_src_to_python_path.sh</code> which can be run  from the project's root directory by calling:</p> <pre><code>source add_src_to_python_path.sh\n</code></pre>"},{"location":"developer_notes/build_instructions/python_bindings.html","title":"Python bindings","text":"<p>We have setup this project to wrap some of the various C/C++ libraries with Python bindings. To install these, run</p> <pre><code>cd build\npip3 install ..\n</code></pre> <p>This will call <code>scikit-build</code>, which in turn will invoke  CMake, and build the whole project. After this, you can then  also run the usual </p> <pre><code>make\nctest\n</code></pre>"},{"location":"src/index.html","title":"Source","text":"<p>This is where we keep various the libraries. </p>"},{"location":"src/arv/index.html","title":"ARV","text":"<p>C library implementing approximate random variables.   </p>"},{"location":"src/arv/error_codes/index.html","title":"Error codes","text":"<p>A basic library to introduce error codes and some associated  functionality. Unfortunately, the C type safety for using  these is not perfect.</p>"},{"location":"src/arv/logging/index.html","title":"Logging","text":"<p>A simple logging library. This is a wrapper around the GLib library.</p>"},{"location":"src/arv/testing/index.html","title":"Testing","text":"<p>A library providing a unit testing framework. The underlying C testing framework uses Criterion, and for Python unittest.</p>"},{"location":"src/arv/version/index.html","title":"Version","text":"<p>This is a small header onlly library which can be included to retreive info about the version of this repository. </p>"},{"location":"src/pyarv/index.html","title":"Binding","text":"<p>A simple hello world example showing how to bind our C code  for use in Python. </p>"},{"location":"src/pyarv/index.html#conventions","title":"Conventions","text":"<p>For simplicity (and ease of consistency) we will adopt the following principles when constructing our C libraries and possible Python bindings. </p>"},{"location":"src/pyarv/index.html#error-checking-and-handling","title":"Error checking and handling","text":"<p>We will have a mix of C and Python libraries, designed to interoperate and also still function independently. Consequently,  there is a grey area in the responsibility for error handling, with the following possibilities:</p> <ul> <li> <p>Have the C libraries try to check and recover from errors. (Made tricky by the limited error handling in C). </p> </li> <li> <p>Have the C libraries make no attempt at error handling.</p> </li> <li> <p>Have the C extension wrappers try and check  the Python input after it has been passed to the C library.</p> </li> <li> <p>Have the Python library check all the input before it gets passed to the C library. </p> </li> <li> <p>No error checking anywhere.</p> </li> <li> <p>etc.</p> </li> </ul> <p>Clearly there are various options. </p>"},{"location":"src/pyarv/index.html#type-errors","title":"Type errors","text":"<p>For type checking we will largely rely on the type system of C and the compilation rules. For Python, where necessary,  we will rely on the Python code to assert the validity of any data types before they are passed to the C libraries. For the boundary of these two languages, we will rely on the  error handling of the python argument and keyword parser.</p> <p>There is a grey area in between where one language must  respect or acknowledge the rules of the other, such as  a Python integer being represented as a <code>long</code>, but the  corresponding Python function expecting an <code>int</code>, where these two might be of different sizes. Here, we will largely put the emphasis on Python to ensure C is happy, as this  is typically easier to code and enforce.  </p>"},{"location":"src/pyarv/index.html#runtime-errors","title":"Runtime errors","text":"<p>Sometimes codes fail for internal problems. An example might be a quadratic solver which finds the real roots  of polynomials and presented with one with complex roots.  Another might be a request for more memory by <code>malloc</code>  failing, not finding a file, a write to some output  failing (<code>printf</code> can fail), or a matrix inversion not being possible. In most of these cases, we generally want to avoid the responsibility of error handling, and  we adopt the mentality \"if something untoward has happened,  then let the program crash and fail in a fast and loud  way...\" (we may try and also do this gracefully  where possible). In C this will generally mean an immediate call to <code>exit</code>.</p>"},{"location":"src/pyarv/index.html#splitting-into-two-libraries","title":"Splitting into two libraries","text":"<p>We follow the convention that for some library, we split this into its core functionality, which contains all the core C functionality and no Python, and a second library which only implements the Python interface. </p>"},{"location":"src/pyarv/index.html#failing-to-link-to-python-c-extension-libraries-on-mac-osx","title":"Failing to link to Python C extension libraries on Mac OSX","text":"<p>One of the reasons we split the functionality into two libraries, (aside from a more modularity), is because the Python build  proceedure typically produces bundles, whereas our  C libraries are typically producing dynamic libraries. This can  lead to linking errors. </p>"},{"location":"src/pyarv/index.html#putting-module-libraries-in-their-own-directory","title":"Putting module libraries in their own directory","text":"<p>To keep a nice modular structure where the C extensions match  the style of Python modules, put any C extensions in their own subdirectory which would be the equivalent of a single python file.</p>"},{"location":"src/pyarv/version/index.html","title":"Version","text":"<p>This is a small header onlly library which can be included to retreive info about the version of this repository. </p>"},{"location":"user_documentation/SUMMARY.html","title":"SUMMARY","text":"<ul> <li>pyarv<ul> <li>example</li> </ul> </li> </ul>"},{"location":"user_documentation/pyarv/example.html","title":"example","text":""},{"location":"user_documentation/pyarv/example.html#pyarv.example.foo","title":"<code>foo(a, b)</code>","text":"<p>A small pure python function of some function we might want to ship and call elsewhere.</p> <p>Parameters:</p> Name Type Description Default <code>a</code> <code>int</code> <p>Anything.</p> required <code>b</code> <code>str</code> <p>Anything.</p> required <p>Returns:</p> Name Type Description <code>a</code> <code>int</code> <p>Returns the first argument.</p> Source code in <code>src/pyarv/example.py</code> <pre><code>def foo(a: int, b: str) -&gt; int:\n    \"\"\"\n    A small pure python function of some function we might want to\n    ship and call elsewhere.\n\n    Parameters\n    ----------\n    a:\n        Anything.\n    b:\n        Anything.\n\n    Returns\n    -------\n    a:\n        Returns the first argument.\n\n    \"\"\"\n    print(f\"The input values are: {a = } and {b = }\")\n    return a\n</code></pre>"}]}